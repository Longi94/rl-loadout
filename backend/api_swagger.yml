openapi: 3.0.0
info:
  version: "{{ version }}"
  title: 'Rocket Loadout Public API'
  contact:
    name: 'Rocket Loadout Discord'
    url: https://discord.gg/c8cArY9
servers:
  - url: "{{ server_host }}/api/v1"
tags:
  - name: bodies
  - name: wheels
paths:
  /bodies:
    get:
      summary: 'Get a list of bodies'
      operationId: controllers.bodies.get
      tags:
        - bodies
      responses:
        200:
          description: 'List of bodies'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Body'
  /bodies/{id}:
    get:
      summary: 'Get a body'
      operationId: controllers.bodies.get_by_id
      tags:
        - bodies
      parameters:
        - name: id
          in: path
          required: true
          description: 'ID of the item (in-game item ID).'
          example: 23
          schema:
            type: integer
      responses:
        200:
          description: 'Body'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Body'
        404:
          description: 'Body not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /wheels:
    get:
      summary: 'Get a list of wheels'
      operationId: controllers.wheels.get
      tags:
        - wheels
      responses:
        200:
          description: 'List of wheels'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wheel'
  /wheels/{id}:
    get:
      summary: 'Get a wheel'
      operationId: controllers.wheels.get_by_id
      tags:
        - wheels
      parameters:
        - name: id
          in: path
          required: true
          description: 'ID of the item (in-game item ID).'
          example: 376
          schema:
            type: integer
      responses:
        200:
          description: 'Wheel'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wheel'
        404:
          description: 'Wheel not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: key
      x-apikeyInfoFunc: api.verify_api_key
  schemas:
    Error:
      type: object
      properties:
        details:
          type: string
          description: 'Details of the error'
          example: 'X not found'
        status:
          type: number
          description: 'HTTP status code'
          example: 404
    Item:
      type: object
      required:
        - id
        - name
        - quality
        - icon
        - paintable
      properties:
        id:
          type: integer
          description: 'ID of the item'
          example: 23
        name:
          type: string
          description: 'Name of the item.'
          example: 'Octane'
        quality:
          type: integer
          description: 'Quality of the item. See https://github.com/Longi94/rl-loadout/blob/master/backend/rocket/quality.py'
          example: 0
        icon:
          type: string
          description: 'Path to the image icon of the item.'
          example: 'icons/Body_Octane_Thumbnail.jpg'
        paintable:
          type: boolean
          description: 'Whether is item normally can have painted attribute or not in the game.'
          example: true
    Body:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
          required:
            - model
          properties:
            model:
              type: string
              description: 'Path to the GLTF model file of the body.'
              example: 'models/Body_Octane_SF.glb'
            blank_skin:
              type: string
              description: 'Path to the RGBA blank skin map of the body.'
              example: 'textures/Pepe_Body_BlankSkin_RGB.tga'
            base_skin:
              type: string
              description: 'Path to the base texture of the body.'
              example: 'textures/Pepe_Body_D.tga'
            chassis_base:
              type: string
              description: 'Path to the base texture of the chassis. Null if this is included in the model.'
              example: null
            chassis_n:
              type: string
              description: 'Normal map of the chassis. This normally null. Only not null if the normal map has a RGBA map inside it, mainly for body paints.'
              example:
    Wheel:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
          required:
            - model
          properties:
            model:
              type: string
              description: 'Path to the GLTF model file of the wheel.'
              example: 'models/WHEEL_Star_SM.glb'
            rim_base:
              type: string
              description: 'Path to the base texture of the rim.'
              example: 'textures/OEM_D.tga'
            rim_rgb_map:
              type: string
              description: 'Path to the rgba map of the rim.'
              example: 'textures/OEM_RGB.tga'
